#!/bin/bash
# Script to sync && upgrade Gentoo portage
version="1.04-r8"; script_name=`basename "$0"`

TEXTDOMAIN=upgrade-portage
TEXTDOMAINDIR=/usr/share/locale

configPath="/usr/lib"
if [ -f "${configPath}/shell-text.cnf" ]; then
	source "${configPath}/shell-text.cnf"
fi
iconPath="/usr/share/icons/hicolor/64x64/apps/upgrade-portage.png"
if [ ! -f "${iconPath}" ]; then
	iconPath="`dirname \"$0\"`/upgrade-portage.png"
fi
worldFile="/var/lib/portage/world"
declare -A tmpFile=( [logs]="/tmp/upgrade-portage.log" [result]="/tmp/zenity-result" )
WIDTH=500
HEIGHT=300

###### FUNCTIONS
set_param () {
	case "$1" in
	 'sync')
		[ $2 -eq 0 ] && unset SYNC || SYNC=1
		;;
	 'quiet')
		[ $2 -eq 0 ] && unset QUIET || QUIET='q'
		;;
	 'verbose')
		[ $2 -eq 0 ] && unset VERBOSE || VERBOSE='v'
		;;
	 'gtk')
		[ $2 -eq 0 ] && unset GTK || GTK=1
		;;
	 'estimate')
	 	[ $2 -eq 0 ] && unset ESTIMATE || ESTIMATE=1
	 	;;
	 'upgrade')
	 	[ $2 -eq 0 ] && unset UPGRADE_NEEDED || UPGRADE_NEEDED=1
	 	;;
	 'portage')
	 	[ $2 -eq 0 ] && unset UPDATE_PORTAGE || UPDATE_PORTAGE=1
	 	;;
	 'clean')
	 	[ -2 -eq 0 ] && unset DEPCLEAN || DEPCLEAN=1
	 	;;

	 *)
	 	local mess=$"An error occurred while setting parameters"
		echo -e "${red}${mess}${nocolor}"
		return 1
		;;
	esac
	return 0
}

# Function to get last log line
get_line () {
	if [ $# -gt 0 ]; then
		grep "$1" "${tmpFile[logs]}" | sed -n '$p'
	else
		grep -v "^$" "${tmpFile[logs]}" | sed -n '$p'
	fi
#	tail -1 "${tmpFile[logs]}"
}

# Function to print log line in zenity
## USAGE: print_line [OPTION] [...]
## OPTION:	-n: no end of line
##			-r REMOVE:	remove REMOVE from print
print_line () {
	local option=""; local remove="^"
	while [ $# -gt 0 ]; do
		case "$1" in
		 "-n")
		 	option="-ne"
		 	;;
		 "-r")
		 	shift
		 	remove="$1"
		 	;;
		 *)
		 	;;
		esac
		shift
	done

	echo ${option} $( grep -v "^$" "${tmpFile[logs]}" | sed -n '$ s/^/# /p' | sed 's/*//g' | sed "s/${remove}//" )
}

# Functions to remove starting and ending blank lines
## USAGE : `cat [FILE] | remove_blanks` | `remove_blanks [FILE]`
remove_blanks () {
	rem_bl () {
		tac | sed '/./,$!d' | tac | sed '/./,$!d'
	}
	if [ $# -gt 0 ]; then
		cat "$1" | rem_bl
	else rem_bl
	fi
}

# Function to kill commands and delete tmp files
## USAGE: prepare_for_exit [command-to-kill] [...]
prepare_for_exit () {
	# get params
	local functions=( "$@" )

	# kill launched function
	for func in "${functions[@]}"; do
		case ${func} in
		 *[!0-9]*)
			pkill "${func}"
			while pgrep "${func}" &> /dev/null; do
				sleep .1
			done
		 	;;
		 *)
			num=$func
			func=$( ps --pid "${num}" -o comm= )
			if [ $? -gt 0 ]; then
				continue
			else
				kill "${num}"
				wait "${num}"
		 	fi
		 	;;
		esac

		local mess=$"Cancelled ${func}"
		echo -e "${orange}${mess}${nocolor}"
	done
	# delete tmp files
	for file in ${tmpFile[@]}; do
		[ -f "${file}" ] && rm "${file}"
	done
	return 0
}

# Function to get human readable time from machine time
## USAGE: get_human_time [--increment] array machine_time
## array must have been declared via -A option and have name different than 'array'
get_human_time () {
	if [ $# -eq 0 ]; then
		echo $"Invalid call to function ${FUNCNAME[0]}"
		return 1
	fi
				
	if [ "$1" = "--increment" ]; then
		incr=1
		shift
	else unset incr
	fi
	
	if [ $# -lt 2 ]; then
		echo $"Invalid parameter $1 for function ${FUNCNAME[0]}"
		return 1
	fi
	
	declare -n array=$1
	if [ $incr ]; then
		case 0 in
		 $(( $2%86400 )) )
			array[d]=$(( ${array[d]}+1 ))
			array[h]=0
			array[m]=0
			array[s]=0
			;;
		 $(( $2%3600 )) )
			array[h]=$(( ${array[h]}+1 ))
			array[m]=0
			array[s]=0
			;;
		 $(( $2%60 )) )
			array[m]=$(( ${array[m]}+1 ))
			array[s]=0
			;;
		 *)
			array[s]=$(( ${array[s]}+1 ))
			;;
		esac
	else
		local machine=$2
		array[d]=$(( $machine/86400 ))
		machine=$(( $machine%86400 ))
		array[h]=$(( $machine/3600 ))
		machine=$(( $machine%3600 ))
		array[m]=$(( $machine/60 ))
		array[s]=$(( $machine%60 ))
	fi
	return 0
}

# Function to print human readable time from human time array
## USAGE: print_human_time human_time
print_human_time () {
	if [ ! $# -eq 1 ] || [ $1 -eq $1 ] &>/dev/null; then
		echo $"Invalid parameter for function ${FUNCNAME[0]}"
		return 1
	fi
	
	declare -n array=$1
	local return_str=""
	[ ${array[d]} -gt 0 ] && return_str="${return_str}${array[d]} days "
	[ ${array[d]} -gt 0 ] || [ ${array[h]} -gt 0 ] && return_str="${return_str}${array[h]}:"
	[ ${array[m]} -gt 9 ] && return_str="${return_str}${array[m]}:" || return_str="${return_str}0${array[m]}:"
	[ ${array[s]} -gt 9 ] && return_str="${return_str}${array[s]}" || return_str="${return_str}0${array[s]}"
	echo $return_str
	return 0
}

# Get average merge time from qlop
## USAGE: get_av_merge PACKAGE
get_av_merge () {

	if [ $# -gt 0 ]; then
		local package=$1
	else return 255
	fi

	local add
	local avgMergeTime
	local file=( $( ls --sort time /var/log/emerge.log* ) )
	for i in ${!file[@]}; do
		case ${file[$i]} in
		 *.gz|*.zip)
		 	avgMergeTime=$( qlop -amMC "$package" -f <(zcat "${file[$i]}") | awk -F' ' '{print $2}' )
		 	;;
		 *)
		 	avgMergeTime=$( qlop -amMC "$package" -f "${file[$i]}" | awk -F' ' '{print $2}' )
			;;
		esac
		[ $avgMergeTime ] && break
	done
	
	echo $avgMergeTime
	return 0
}

# Emerge via zenity
## USAGE zenity_emerge [ACTION] [PACKAGE|SET] [OPTIONS]
zenity_emerge() {
	[ $# -lt 1 ] && return 255
	# clean tmp files
	prepare_for_exit
	
	case $1 in
	 -s|--sync)
	 	local ACTION='sync'
	 	local options="--pulsate"
	 	local title=$"Syncing repositories"
	 	local slp=.5
	 	local exFuncs=( rsync emerge )
	 	local exText=$"An error occurred while syncing, please check logs"
	 	local exCode=2
	 	local eix_mess=$"Updating eix database"
	 	;;
	 -C|--check-depclean)
	 	local ACTION='check-depclean'
	 	local title=$"Preparing for cleaning"
	 	local options="--pulsate"
	 	local slp=.5
		local exFuncs=( emerge )
	 	local exText=$"An error occurred while checking for obsolete packages, please check logs"
	 	local exCode=5
	 	;;
	 -c|--depclean)
	 	shift
	 	local ACTION='depclean'
	 	local title=$"Cleaning your system"
	 	local slp=.5
	 	local shift
	 	local options=""; excluded=""
	 	while [ $# -gt 1 ]; do
	 		case $1 in
	 	 	 --exclude)
	 	 	 	local excluded="$2"
	 	 		;;
	 	 	 *)
	 	 	 	echo $"Invalid parameter $1 for function ${FUNCNAME[0]}"
	 	 	 	exit 255
	 	 	 	;;
	 	 	esac
	 	 	
	 	 	shift 2
	 	done
	 	unset total
	 	local cleaning=0
	 	local percent=0
	 	local exFuncs=( emerge )
	 	local exText=$"An error occurred while cleaning system, please check logs"
	 	local exCode=6
		;;
	 -k|--check)
		[ $# -eq 2 ] || return 255
	 	local ACTION='check'
	 	local UP=$2
		case $UP in
		 @*)
		 	title=$"Checking for upgrades"
		 	;;
		 *)
		 	title=$"Checking for ${UP} upgrade"
		 	;;
		esac
		local options="--pulsate"
		local slp=.5
	 	local exFuncs=( emerge )
	 	local exText=$"An error occurred while checking dependencies, please check logs"
	 	local exCode=3
	 	;;
	 	
	 *)
	 	local ACTION='upgrade'
	 	[ $1 = "--upgrade" ] && shift
	 	local UP=$1
		case $UP in
		 "@world")
			local title=$"Upgrading your system"
			;;
		 @*)
			local title=$"Upgrading ${UP}"
			;;
		 *)
		 	local pack=${UP#*/}
		 	local title=$"Upgrading ${pack^}"
			;;
		esac
		local slp=1
	 	shift
	 	local options=""; local excluded="" 	
	 	while [ $# -gt 1 ]; do
	 		case $1 in
	 	 	 --choice)
	 	 	 	declare -n packList=$2
	 	 	 	;;
	 	 	 --time)
	 	 	 	declare -n mergeEst=$2
	 	 	 	;;
	 	 	 --exclude)
	 	 	 	excluded="$2"
	 	 		;;
	 	 	 *)
	 	 	 	echo $"Invalid parameter $1 for function ${FUNCNAME[0]}"
	 	 	 	exit 255
	 	 	 	;;
	 		esac
	 	
	 		shift 2
	 	done

		# avg time
		local avg=0; local nb=0
		if [ $ESTIMATE ]; then
			for i in ${!packList[@]}; do
				if [ ${mergeEst[$i]} ]; then
					let avg+=${mergeEst[$i]}
					let nb+=1
				fi
			done
		fi
		if [ $nb -gt 0 ]; then
			avg=$(( $avg/$nb ))
		else avg=10
		fi

		# total time
		local total=0
		for i in ${!packList[@]}; do
			[ ${mergeEst[$i]} -eq 0 ] && add=$avg || add=${mergeEst[$i]}
			total=$(( $total+$add ))
		done
		
		# elapsed for calculating percentage & elapsed_h to print current package's merge time
		local emerging=0; local installing=0
		local percent=0; local elapsed=0;
		declare -A elapsed_h=( [machine]=0 [d]=0 [h]=0 [m]=0 [s]=0 )
	 	local exFuncs=( emerge )
	 	local exText=$"An error occurred while upgrading system, please check logs"
	 	local exCode=4
		;;
	esac

	echo -e "${green}${title}...${nocolor}"
	(
		case $ACTION in
		 'sync')
			emerge --sync |& tee "${tmpFile[logs]}"
			res=$?
			if [ $res -eq 0 ] && type eix &> /dev/null; then
				echo -e "${green}${eix_mess}...${nocolor}"
				eix-update & pid=$!
				exFuncs[ $(( ${#exFuncs[@]}-1 )) ]=$pid
				wait $pid
			fi
			;;
		 'check-depclean')
		 	emerge -pqc |& tee "${tmpFile[logs]}"
		 	res=$?
		 	;;
		 'depclean')
		 	emerge -qc ${excluded} |& tee "${tmpFile[logs]}"
		 	res=$?
		 	;;
		 'check')
		 	case ${UP} in
		 	 @*)
		 		emerge -pquDN ${UP} |& tee "${tmpFile[logs]}"
		 		res=$?
		 		;;
		 	 *)
		 	 	emerge -pqu1 ${UP} |& tee "${tmpFile[logs]}"
		 	 	res=$?
		 	 	;;
		 	esac
		 	;;
		 'upgrade')
		 	case ${UP} in
		 	 @*)
		 		emerge -quDN ${excluded} ${UP} |& tee "${tmpFile[logs]}"
		 		res=$?
		 		;;
		 	 *)
		 	 	emerge -qu1 ${UP} |& tee "${tmpFile[logs]}"
		 	 	res=$?
		 	 	;;
		 	esac
		 	;;
		esac
		echo $res > "${tmpFile[result]}"
	) &
	exFuncs=( ${exFuncs[@]} $! )
	sleep .5
	dots=""
		
	while [ ! -f "${tmpFile[result]}" ]; do
		sleep $slp
		
		case $ACTION in
		 'sync')
		 	if pgrep eix-update &>/dev/null; then
		 		echo "# ${eix_mess}"
		 	else print_line
		 	fi
		 	;;
		 'check-depclean')
		 	local mess=$"Checking for obsolete packages"
		 	echo "# ${mess} ${dots}"
		 	[ "$dots" = "..." ] && dots="" || dots="${dots}."
		 	;;
		 	
		 'depclean')
		 	print_line -r "Unmerging in: 5 4 3 2 1>>> "
			new=`get_line "Unmerging (" | sed 's/Unmerging in: 5 4 3 2 1>>> //' | awk -F[\(\)\ ] '{ print $4 }'`
			[ "$new" = "" ] || cleaning=$new

			if [ -z $total ]; then
				[ "$new" = "" ] || total=`get_line "Unmerging (" | sed 's/Unmerging in: 5 4 3 2 1>>> //' | awk -F[\(\)\ ] '{ print $6 }'`
			fi
			[ -z $total ] || percent=$(( 100*($cleaning-1)/$total ))
			echo "$percent"
		 	;;
		 	
		 'check')
		 	local mess=$"Calculating dependencies"
		 	echo "# ${mess} ${dots}"
		 	[ "$dots" = "..." ] && dots="" || dots="${dots}."
		 	;;
		 	
		 'upgrade')
			unset edited

			if [ -f "${tmpFile[logs]}" ]; then
				new=$( get_line Emerging | awk -F[\(\)\ ] '{ print $4 }' )
				[ ! -z $new ] && [ $new -gt $emerging ] && emerging=$new && edited=1

				new=$( get_line Installing | awk -F[\(\)\ ] '{ print $4 }' )
				[ ! -z $new ] && [ $new -gt $installing ] && installing=$new && edited=1

				if [ $edited ]; then
					cur_package=$( get_line | awk -F' ' '{ print $6 }' )
					cur_package=${cur_package%-[0-9]*}
					
					[ -z $cur_index ] || last_index=$cur_index
					for cur_index in ${!packList[@]}; do
						if [ "${packList[$cur_index]}" = "${cur_package}" ]; then
							if [ $installing -eq $emerging ]; then
								[ ${mergeEst[$cur_index]} -eq 0 ] && add=$(( 8*${avg}/10 )) || add=0
							elif [ $installing -gt 0 ]; then
								[ ${mergeEst[$last_index]} -eq 0 ] && add=$(( 2*${avg}/10 )) || add=${mergeEst[$last_index]}
								for i in ${!elapsed_h[@]}; do
									elapsed_h[$i]=0
								done
							else add=0
							fi
							elapsed=$(( $elapsed + $add ))
							break
						fi
					done
				fi
			fi
		
			if [ $emerging -gt 0 ]; then
				# human readable elapsed time
				if [ ! $edited ] || [ $installing -eq $emerging ]; then
					elapsed_h[machine]=$(( ${elapsed_h[machine]}+1 ))
					get_human_time --increment elapsed_h ${elapsed_h[machine]}
				fi
								
				# recalculate percentage
				if [ ${mergeEst[$cur_index]} -eq 0 ]; then
					percent=$(( 100*${elapsed}/${total} ))
				elif [ ${elapsed_h[machine]} -lt ${mergeEst[$cur_index]} ]; then
					percent=$(( 100* (${elapsed}+${elapsed_h[machine]}) / ${total} ))
				fi

				# print line
				print_line -n
				print=$( print_human_time elapsed_h )
				if [ ${mergeEst[$cur_index]} -gt 0 ]; then
					echo " - ${print} / ${time_h[$cur_index]} (estimated)"
				else echo " - ${print}"
				fi
			else
				local mess=$"Calculating dependencies"
				echo "# ${mess} ${dots}"
				[ "$dots" = "..." ] && dots="" || dots="${dots}."
			fi
			
			# finally print percentage
			echo "$percent"
		 	;;
		esac
		
	done | zenity --width ${WIDTH} --window-icon "${iconPath}" --cancel-label $"Skip" --ok-label $"Continue" --progress --title "${title}" --text "" --auto-close ${options}

	ret=$?
	# Aborted
	if [ $ret -gt 0 ]; then
		# first backup logs to print messages
		mv "${tmpFile[logs]}" "/tmp/log.bak"
		prepare_for_exit ${exFuncs[@]}
		mv "/tmp/log.bak" "${tmpFile[logs]}"
	fi

	# Print messages from emerging
	# $message is a table of a new messages line
	[ $ACTION = 'upgrade' ] && local message=( $( grep -Fn 'Messages for package' "${tmpFile[logs]}" | awk -F: '{print $1}' ) ) || local message=( )
	message=( "${message[@]}" $( grep -Fn ' * IMPORTANT:' "${tmpFile[logs]}" | awk -F: '{print $1}' ) )
	
	for i in ${!message[@]}; do
		mess=$( sed -n "${message[$i]}p" "${tmpFile[logs]}" )
		case "${mess# * }" in
		 IMPORTANT:*)
			title=$"Configuration file needs update"
			start=$(( ${message[$i]} ))
			;;
		 *)
			package=$( sed -n "${message[$i]} s/^.*package \(.*\):$/\1/p" "${tmpFile[logs]}" )
			title=$"Messages for ${package}"
			start=$(( ${message[$i]}+1 ))
			;;
		esac
		[ $i -eq $(( ${#message[@]}-1 )) ] && end='$' || end=$(( ${message[$i+1]}-1 ))
		
		# print messages
		sed -n "${start},${end}p" "${tmpFile[logs]}" | sed 's/^ \* //' | remove_blanks \
		| zenity --width ${WIDTH} --height ${HEIGHT} --window-icon "${iconPath}" --text-info --title "${title}"
	done
	
	# Aborted
	[ $ret -gt 0 ] && prepare_for_exit && return 1

	#error
	[ -s "${tmpFile[result]}" ] && [ $( cat "${tmpFile[result]}" ) -gt 0 ] && zenity --width ${WIDTH} --window-icon "${iconPath}" --error --title $"Error" --text "${exText}" && prepare_for_exit && return ${exCode}
	
	rm "${tmpFile[result]}" && return 0
}

# Upgrade via zenity
## USAGE: zenity_upgrade OPTION|PACKAGE|SET
zenity_upgrade () {
	[ $# -eq 1 ] || return 255
	case $1 in
	 '--depclean')
		local ACTION='depclean'
		local opt='-depclean'
		;;
	 *)
	 	local ACTION='upgrade'
	 	local UP=$1
	 	local opt=" $UP"
	 	;;	
	esac
	
	# First check
	check=1
	while [ $check ]; do
		zenity_emerge --check${opt}
		ret=$?
		if [ $ret -gt 1 ]; then
			return $(( $ret+10 ))
		elif [ $ret -gt 0 ]; then
			if [ "$ACTION" = "depclean" ] || [ "${UP:0:1}" = "@" ]; then
			 	return 11
			else
			 	return 1
			fi
		fi
		
		# nothing found
		[ ! -s "${tmpFile[logs]}" ] && prepare_for_exit && return 1
		
		if [ "$ACTION" = "depclean" ]; then
			unset check
		# Needs editing /etc/portage/
		elif grep -q '^!!!' "${tmpFile[logs]}"; then
			remove_blanks "${tmpFile[logs]}" | zenity --width ${WIDTH} --height ${HEIGHT} --window-icon "${iconPath}" --text-info --title $"Some configuration is necessary to proceed"
			[ $? -gt 0 ] && prepare_for_exit && return 11
			
		else unset check		
		fi
	done
	
	local text=$"Uncheck packages you want to exclude."
	text+="\n"
	case $ACTION in
	 'depclean')
		local number=$( sed -n '$p' "${tmpFile[logs]}" | awk -F' ' '{print $4}' )
		# remove unwanted lines from output
		sed -i '/\//!d' "${tmpFile[logs]}"
		sed -i '/=/d' "${tmpFile[logs]}"
		sed -i '/*/d' "${tmpFile[logs]}"

		local package=( $( cut -d: -f1 "${tmpFile[logs]}" ) )
		unset versions selected protected omitted line
		for i in ${!package[@]}; do
			versions[$i]=$( sed -n "$(( ${i}+1 ))p" "${tmpFile[logs]}" | cut -d: -f2 )
			read selected[$i] protected[$i] omitted[$i] <<< "${versions[$i]}"
			line[$i]="TRUE\n${package[$i]}\n${selected[$i]}\n${protected[$i]}\n${omitted[$i]}"
		done
		unset versions selected protected omitted

		local cols=( $"Unmerge" $"Package" $"Selected" $"Protected" $"Omitted" )
		local options="--checklist --column ${cols[0]} --column ${cols[1]} --column ${cols[2]} --column ${cols[3]} --column ${cols[4]}"
		local aborted=1
		;;

	'upgrade')
		local messages=$( sed '/^\[/d' "${tmpFile[logs]}" )
		sed -i '/^\[/!d' "${tmpFile[logs]}"
		
		# list of all packages that would be merged
		unset nomerge
		local list=( $( sed '/^\[ebuild/!d' "${tmpFile[logs]}" | cut -d[ -f2 | cut -d] -f2 ) )
		local number=${#list[@]}

		# prepare output and ask for final choice
		unset nomerge package version action current time time_h line
		for i in ${!list[@]}; do
			if [ "${list[$i]:0:7}" = "[ebuild" ]; then
				package[$i]=${list[$i]%-[0-9]*}
				version[$i]=${list[$i]#${package[$i]}-}
				action[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile[logs]}" | cut -d' ' -f2- | cut -d] -f1 )
				grep -q ${package[$i]} ${worldFile} && action[$i]="*${action[$i]}*" || action[$i]=" ${action[$i]} "
				current[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile[logs]}" | cut -d[ -f3 | cut -d] -f1 )
				time_h[$i]=""
				
			else
				nomerge[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile[logs]}" | cut -d] -f2- )
				nomerge_action[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile[logs]}" | cut -d[ -f2 | cut -d' ' -f1 )
			fi
		done
		if [ ${#nomerge_action[@]} -gt 0 ]; then
			text+="\n"
			[ ${#nomerge_action[@]} -gt 1 ] && text+=$"Some packages won't be installed :" || text+=$"One package won't be installed :"
			text+="\n"
			for i in ${!nomerge_action[@]}; do
				text+="<span color=\"brown\">${nomerge_action[$i]}</span> : ${nomerge[$i]}\n"
			done
		fi

		# Build time estimation
		local nb=0    #number of packages found
		local totTime=0
		if [ $ESTIMATE ]; then
			# estimate each time
			local mess=$"Estimating merge time"
			echo -e "${green}${mess}...${nocolor}"
			for i in ${!list[@]}; do
				time[$i]=$( get_av_merge "${package[$i]}" )
				if [ -z ${time[$i]} ]; then
					time[$i]=0
					time_h[$i]='??:??'
					echo $"Unknown merge time for ${package[$i]}"
				else
					let nb+=1
					let totTime+=${time[$i]}
					declare -A time_hum
					get_human_time time_hum ${time[$i]}
					time_h[$i]=$( print_human_time time_hum )
					unset time_hum
					echo $"Average merge time for ${package[$i]} is ${time_h[$i]}"
				fi
			done
		fi

		# total merge time
		if [ $nb -eq ${#list[@]} ]; then
			declare -A time_hum
			get_human_time time_hum $totTime
			text+=$"Estimated merge time is"
			text+=" $( print_human_time time_hum ).\n"
			unset time_hum
		fi
		
		local cols=( $"Merge" $"Package" $"Action" $"Version" $"Current" $"Time" )
		local options="--column ${cols[1]} --column ${cols[2]} --column ${cols[3]} --column ${cols[4]} --column ${cols[5]}"
		case ${UP} in
		 @*)
		 	check="TRUE\n"
			options="--checklist --column ${cols[0]} ${options}"
			[ $ESTIMATE ] || options+=" --hide-column 6"
			aborted=1
			;;
		 *)
		 	text=$"${UP} needs update, it's highly recommended to do it first.\n"
		 	check=""
			[ $ESTIMATE ] || options+=" --hide-column 5"		 	
			aborted=11
			;;
		esac
		text+="${messages}"
				
		for i in ${!package[@]}; do
			line[$i]="${check}${package[$i]}\n${action[$i]}\n${version[$i]}\n${current[$i]}\n${time_h[$i]}"
		done
		unset action version current
		;;
	esac	
	
	if [ $ACTION = 'upgrade' ]; then
		[ $number -gt 1 ] && title=$"${number} packages should be merged" || title=$"One package should be merged"
	else
		[ $number -gt 1 ] && title=$"${number} packages should be unmerged" || title=$"One package should be unmerged"
	fi
	
	choice=( $(
		for i in ${!package[@]}; do
			echo -e "${line[$i]}"
		done | zenity --width ${WIDTH} --height ${HEIGHT} --window-icon "${iconPath}" --list ${options} --separator ' ' --title "${title}" --text "${text}" )
	)
	
	ret=$?
	if [ "$ACTION" = "upgrade" ]; then
		[ "${UP:0:1}" = '@' ] || choice=( ${package[@]} )
	fi
	if [ "$ret" -gt 0 ] || [ ${#choice[@]} -eq 0 ]; then
		local mess=$"Aborted"
		echo -e "${orange}${mess}${nocolor}"
		prepare_for_exit
		if [ "$ACTION" = "upgrade" ] && [ "${UP:0:1}" = '@' ]; then
			return 11
		else
			return 1
		fi
	fi

	# get excluded packages list
	local exclude=""
	if [[ "${package[@]}" != "${choice[@]}" ]]; then
		j=0
		for i in ${!package[@]}; do
			if [ "${choice[$j]}" = "${package[$i]}" ]; then
				j=$(( $j+1 ))
			else
				exclude+=" --exclude ${package[$i]}"
				[ "$ACTION" = "upgrade" ] && time=( ${time[@]:0:$j} ${time[@]:$j+1} ) && time_h=( ${time_h[@]:0:$j} ${time_h[@]:$j+1} )
			fi
		done
	fi
	unset package
	
	# finally emerge
	case $ACTION in
	 'depclean')
	 	options="--depclean"
	 	;;
	 'upgrade')
	 	options="${UP} --choice choice --time time"
	 	;;
	esac
	
	zenity_emerge ${options} --exclude "${exclude}"
	[ $? -gt 0 ] && ret=$(( $?+10 )) || ret=0
	
	case $ACTION in
	 'depclean')
		if [ ! -s "${tmpFile[logs]}" ] && [ -z "$exclude" ]; then
			ret=1
		fi
		;;
	 'upgrade')
		if grep -q "!!! existing preserved libs found" "${tmpFile[logs]}"; then
			ret=3
		elif [ ! -z "${exclude}" ] || [ ! "${UP}" = "@world" ]; then
			ret=2
		fi
		;;
	esac
	
	prepare_for_exit
	return $ret
}

######## START OF SCRIPT

# Initialisation
SET='@world'
set_param 'gtk' 0
set_param 'quiet' 0
set_param 'verbose' 0
set_param 'sync' 1
set_param 'upgrade' 1

# Get parameters
while [ "$#" -gt 0 ]; do
	case "$1" in
     "-h"|"--help")
        # HELP
        help=$( cat << HELP
${bold}Script for upgrading Gentoo${normal}
Usage : ${Blue}upgrade${normal} [${Green}OPTIONS${normal}] [${Green}@SET${normal}]

${Green}OPTIONS${normal} :
        ${bold}-h|--help${normal}	Print this help and exit
        ${bold}-V|--version${normal}    Print this script's current version and exit
        
        ${bold}-q|--quiet${normal}    	Run quietly
        ${bold}-v|--verbose${normal}    Run verbosely
        ${bold}-x${normal}    Run graphically

        
${Green}SET${normal} :
	Set to upgrade, if not set ${green}@world${nocolor} will be used

HELP
)
        echo -e $"${bold}Script for upgrading Gentoo${normal}
Usage : ${Blue}upgrade${normal} [${Green}OPTIONS${normal}] [${Green}@SET${normal}]

${Green}OPTIONS${normal} :
	${bold}-h|--help${normal}	Print this help and exit
	${bold}-V|--version${normal}	Print this script's current version and exit

	${bold}-q|--quiet${normal}	Run quietly
	${bold}-v|--verbose${normal}	Run verbosely
	${bold}-x${normal}		Run graphically

${Green}SET${normal} :
	Set to upgrade, if not set ${green}@world${nocolor} will be used"
        exit 0
        ;;

	 @*)
		SET=$1
		;;

	 "-x")
		set_param 'gtk' 1 && set_param 'quiet' 1 && set_param 'verbose' 0 && break || exit 255
		;;
	 "-q"|"--quiet")
		set_param 'quiet' 1 || exit 255
		;;
	 "-v"|"--verbose")
		set_param 'verbose' 1 || exit 255
		;;
	 "-V"|"--version")
		echo -e $"${Orange}${script_name^}${normal} script for portage based system, version ${orange}${version}${nocolor}"
		exit 0
		;;

	 "-qv"|"-vq")
		set_param 'quiet' 1 && set_param 'verbose' 1 || exit 255
		;;

	 *)
		echo -e $"${red}Unknown parameter ${1}${nocolor}, exiting..." && exit 255
		;;
	esac
	shift
done

# Check if qlop exists
if [ $GTK ]; then
       type qlop &> /dev/null && set_param 'estimate' 1 || set_param 'estimate' 0
fi

# Get repos locations
echo "### $(date) ###"
repos=( $( grep location /etc/portage/repos.conf/* | cut -d '=' -f2 ) )

# Search for last sync timestamps
last=0
text=$"Checking repositories"
text+="..."
echo -e "${green}${text}${nocolor}"
unset time
for i in "${!repos[@]}"; do
	if [ -f "${repos[$i]}/metadata/timestamp.chk" ]; then
		timestamp=$( cat "${repos[$i]}/metadata/timestamp.chk" )
		time[$i]=$( date -d "${timestamp}" "+%s" )
		text=$"Last sync for ${repos[$i]##*/} is "
		text+="`date -d @${time[$i]}`"
		[ ! $QUIET ] || [ $VERBOSE ] && echo "${text}"

		if [ ${time[$i]} -gt `date '+%s'` ]; then
			text1=$"Sync date for ${repos[$i]##*/} is newer than now"
			text2=$", please correct your local time"
			[ ! $GTK ] && echo -e "${red}${text1}${nocolor}${text2}" || zenity --width ${WIDTH} --window-icon "${iconPath}" --error --title $"Time error" --text "<span color=\"red\">${text1}</span>${text2}"
			echo $"Exiting..."
			exit 1
		fi

	else
		text=$"Unknown last sync for ${repos[$i]##*/}"
		[ $VERBOSE ] && echo "${text}"
	fi
done
for time in "${time[@]}"; do
	if [ $time -gt $last ]; then
		last=$time
	fi
done

# + 1 day
((last+=86400))
now=$(date "+%s")
# less than 1 day
if [ $now -lt $last ]; then

	text1=$"Your last sync is newer than 1 day"
	text2=$"Do you want to sync again ?"
	text3="-->"
	answerok=$"y"
	answerko=$"n"
	answers="(${answerok}/${answerko^})"

	if [ $GTK ]; then
		if ! zenity --width ${WIDTH} --window-icon "${iconPath}" --question --title "${text1}" --text "${text2}" --default-cancel; then
			set_param 'sync' 0
		fi
	else
		echo "${bold}${text1}${normal}. ${text2} ${answers}"
		
		while true;	do

			read -p "${text3}" ans

			case "$ans" in
				${answerko}|${answerko^}|'')
					set_param 'sync' 0
					break 2
					;;

				${answerok}|${answerok^})
					break 2
					;;

				*)
					echo -n $"Unknown answer"
					echo " (${answerok}/${answerko^} ?)"
					;;
			esac
		done
	fi
	text1=$"Last sync newer than 24h"
	[ $SYNC ] && text2=$"forcing sync" || text2=$"skipping sync"
	echo "${text1}, ${text2}"
fi

# Sync
if [ $SYNC ]; then
	if [ ! $GTK ]; then
		title=$"Syncing repositories"
		echo -e "${green}${title}...${nocolor}"
		emerge --sync
		[ $? -gt 0 ] && exit 2
		if type eix &> /dev/null; then
			echo $"Updating eix database"
			eix-update
		fi
	else
		zenity_emerge --sync
		ret=$? && [ $ret -gt 0 ] && exit $ret
		
		# upgrade portage ?
		if [ $( grep -n 'An update to portage is available' "${tmpFile[logs]}" | awk -F: '{print $1}' ) ]; then
			set_param 'portage' 1
		else set_param 'portage' 0
		fi
	fi
else 
	if type eix &> /dev/null; then
		eix -qu sys-apps/portage && set_param 'portage' 1 || set_param 'portage' 0
	else set_param 'portage' 1
	fi
fi

# Upgrade
if [ $GTK ]; then

	# first check for news
	news=$( emerge -q --check-news )
	if [ ! -z "${news}" ]; then
		eselect news list | sed -n 's/ N //p' > "${tmpFile[logs]}"
		index=( $( cut -d[ -f2 "${tmpFile[logs]}" | cut -d] -f1) )
		unset date title
		for i in ${!index[@]}; do
			read date[$i] title[$i] <<< $( sed -n "$(( $i+1 ))p" "${tmpFile[logs]}" | awk '{for (i=2; i<=NF; i++) printf "%s " ,$i }' )
		done

		choice=( $(
			for i in ${!index[@]}; do
				echo -e "TRUE\n${index[$i]}\n${title[$i]}\n${date[$i]}"
			done | zenity --width ${WIDTH} --height ${HEIGHT} --window-icon "${iconPath}" --list --checklist --column 'read' --column 'index' --column 'Title' --column 'Date' --hide-column 2 --separator ' ' --title $"${#index[@]} news need reading" --text $"Keep checked those you want to read now" ) )

		for i in ${!choice[@]}; do
			eselect news read ${choice[$i]} | zenity --width ${WIDTH} --height ${HEIGHT} --window-icon "${iconPath}" --text-info --title "${title[$i]}"
			[ $? -gt 0 ] && eselect news unread ${choice[$i]}
		done
	fi	

	# update portage?
	if [ $UPDATE_PORTAGE ]; then
		zenity_upgrade sys-apps/portage
		[ $? -gt 10 ] && exit $(( $?-10 ))
	fi

	# upgrade
	zenity_upgrade ${SET}
	case $? in
	 0) # all done
	 	;;
	 1) # nothing to merge
	 	set_param 'upgrade' 0
	 	;;
	 2) # partial
		text=$"Partial upgrade is done"
		zenity --width ${WIDTH} --window-icon "${iconPath}" --info --title $"Upgrade" --text "${text}"
		exit 0
	 	;;
	 3) # preserved libs
	 	zenity_upgrade @preserved-rebuild
		[ $? -gt 10 ] && exit $(( $?-10 ))
	 	;;
	 *) # exit with error
	 	exit $(( $?-10 ))
	 	;;
	esac
		
# Standard upgrade
else
	text=$"Checking for upgrades"
	echo -e "${green}${text}...${nocolor}"
	emerge -a${QUIET}${VERBOSE}uDN ${SET}

	if [ $? -gt 0 ]; then
		text1=$"An error occurred on compilation time"
		text2=$"please check logs for more information"
		echo -e "${red}${text1}${nocolor}, ${text2}"
		exit 4
	fi
fi

# Depclean
if [ -z "$exclude" ] && [ "$SET" = "@world" ]; then

	if [ $GTK ]; then
		zenity_upgrade --depclean
		case $? in
		 0) # all done
		 	set_param 'upgrade' 1
		 	;;
		 1) # nothing to clean
		 	#set_param 'upgrade' 0
		 	;;
		 *) # exit with error
		 	exit $(( $?-10 ))
		 	;;
		esac

	# Standard cleaning
	else
		text=$"Cleaning your system"
		echo -e "${green}${text}...${nocolor}"
		emerge -a${QUIET}${VERBOSE}c || exit 5
	fi
fi

# Finished
[ $UPGRADE_NEEDED ] && text=$"Your system is now up to date" || text=$"Your system was already up to date"
[ $GTK ] && zenity --width ${WIDTH} --window-icon "${iconPath}" --info --title $"Upgrade" --text "${text}" && prepare_for_exit
echo "${text}"

exit 0
