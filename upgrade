#!/bin/bash
# Script to sync && upgrade Gentoo portage
configPath="/usr/lib"
if [ -f "${configPath}/shell-text.cnf" ]; then
	source "${configPath}/shell-text.cnf"
fi
tmpFile="/tmp/upgrade-portage.log"

# functions
set_param () {
	case "$1" in
	 's'|'sync')
		[ $2 -eq 0 ] && SYNC=0 || SYNC=1
		;;
	 'q'|'quiet')
		[ $2 -eq 0 ] && QUIET=0 || QUIET=1
		;;
	 'v'|'verbose')
		[ $2 -eq 0 ] && VERBOSE=0 || VERBOSE=1
		;;
	 'x')
		[ $2 -eq 0 ] && X=0 || X=1
		;;

	 *)
		echo -e "${red}An error occurred while setting parameters${normal}"
		return 1
		;;
	esac
return 0
}

# init
SET='@world'
set_param 'x' 0
set_param 'q' 0
set_param 'v' 0
set_param 's' 1

# get parameters
while [ "$#" -gt 0 ]; do
	case "$1" in
          "-h"|"--help")
                # HELP
                help=$( cat << HELP
${bold}Script for upgrading Gentoo${normal}
Usage : ${Blue}upgrade${normal} [${Green}OPTIONS${normal}] [${Green}@SET${normal}]

${Green}OPTIONS${normal} :
        ${bold}-h|--help${normal}	Print this help and exit
        ${bold}-q|--quiet${normal}    	Run quietly
        ${bold}-v|--verbose${normal}    Run verbosely
        ${bold}-x${normal}    Run graphically

${Green}SET${normal} :
	Set to upgrade, if not set ${green}@world${normal} will be used

HELP
)
                echo -e "$help"
                exit 0
                ;;

	 @*)
		SET=$1
		;;

	 '-x')
		set_param 'x' 1 && set_param 'q' 1 && set_param 'v' 0 && break || exit 255
		;;
	 '-q'|'--quiet')
		set_param 'q' 1 || exit 255
		;;
	 '-v'|'--verbose')
		set_param 'v' 1 || exit 255
		;;

	 '-qv'|'-vq')
		set_param 'q' 1 && set_param 'v' 1 || exit 255
		;;

	 *)
		echo -e "${red}Unknown parameter ${1}${normal}, exiting..." && exit 255
		;;
	esac
	shift
done

# get repos locations
repos=( $( grep location /etc/portage/repos.conf/* | cut -d '=' -f2 ) )

# search for last sync timestamps
last=0
text="Checking repositories..."
echo -e "${green}${text}${normal}"
for i in "${!repos[@]}"; do
	if [ -f "${repos[$i]}/Manifest" ]; then
		time[$i]=$( date -d `grep TIMESTAMP "${repos[$i]}/Manifest" | cut -d ' ' -f2` "+%s" )
		if [ ${time[$i]} -gt `date '+%s'` ]; then
			text1="Sync date for ${repos[$i]##*/} is newer than now"
			text2=", please correct your local time"
			[ $X -eq 0 ] &&	echo -e "${red}${text1}${normal}${text2}" || zenity --width=500 --error --title "Time error" --text "<span color=\"red\">${text1}</span>${text2}"
			echo "Exiting..."
			exit 1
		fi

		[ $QUIET -gt 0 ] && [ $VERBOSE -eq 0 ] || echo "Last sync for ${repos[$i]##*/} is `date -d @${time[$i]}`"
	else
		[ $VERBOSE -eq 0 ] || echo "Unknown last sync for ${repos[$i]##*/}"
	fi
done
for i in "${!time[@]}"; do
	if [ ${time[$i]} -gt $last ]; then
		last=${time[$i]}
	fi
done

# + 1 day
((last+=86400))
now=$(date "+%s")
# less than 1 day
if [ $now -lt $last ]; then

	text1="Your last sync is newer than 1 day"
	text2="Do you want to sync again ?"
	text3="-->" 

	if [ $X -eq 0 ]; then
		echo "${bold}${text1}${normal}. ${text2} (y/N)"
		while true;	do

			read -p "${text3}" ans

			case "$ans" in
				[nN]*|'')
					SYNC=0
					break 2
					;;

				[yY]*)
					break 2
					;;

				*)
					echo "Unknown answer (y/N ?)"
					;;

			esac
		done
	else
		if zenity --width=300 --question --title "${text1}" --text "${text2}" --default-cancel; then
			SYNC=1
		else SYNC=0
		fi
	fi
fi

# FUNCTIONS
# get last log line
get_line () {
	tail -1 "${tmpFile}"
}
# print line in zenity
print_line () {
	echo `get_line | grep -v "^$" | sed 's/^/# /' | sed 's/*//g'`
}


# Sync
if [ $SYNC -gt 0 ]; then
	text="Syncing repositories..."
	echo -e "${green}${text}${normal}"
	if [ $X -eq 0 ]; then
		emerge --sync
		[ $? -gt 0 ] && exit 2
	else
		( touch /tmp/syncing && sudo -A emerge --sync 2>&1 > "${tmpFile}" && rm /tmp/syncing ) &
		while [ -f /tmp/syncing ]
		do
			sleep .5
			print_line
		done | zenity --progress --width=500 --title "${text}" --pulsate --auto-close --text ""

		if [ $? -gt 0 ]; then 
			sudo pkill emerge
		fi
	fi
fi

# Upgrade
text="Checking for upgrades..."
echo -e "${green}${text}${normal}"
if [ $X -gt 0 ]; then
	
	( touch /tmp/checking && emerge -pquDN ${SET} 2>&1 > "${tmpFile}" && rm /tmp/checking ) &
	dots=""			
	while [ -f /tmp/checking ]
	do
		sleep .5
		echo "# Calculating dependencies ${dots}"
		[ "$dots" = "..." ] && dots="" || dots="${dots}."
	done | zenity --progress --width=500 --title "${text}" --pulsate --auto-close --text ""

	if [ $? -gt 0 ]; then
		pkill emerge
		exit 1
	fi

	if [ ! -s "${tmpFile}" ]; then
		zenity --info --width 500 --title "Upgrade" --text "Your system is already up to date"
		exit 0
	else
		zenity --width=500 --height=300 --text-info --title "Here are packages that need updates" --filename "${tmpFile}" || exit 1

		( touch /tmp/emerging && sudo -A emerge -quDN ${SET} 2>&1 > "${tmpFile}" && rm /tmp/emerging ) &
		emerging=0		
		installing=0
		while [ -f /tmp/emerging ]
		do
			sleep .5
			print_line
			emerging=`get_line | grep Emerging | awk -F[\(\)\ ] '{ print $3 }'`
			if [ -n $emerging ]; then
				if [ -z $total ]; then
					total=`get_line | grep Emerging | awk -F[\(\)\ ] '{ print $5 }'`
					[ -z $total ] || total=$((2*$total))
				fi
				[ $installing -lt $emerging ] && grep "Installing" "${tmpFile}" && installing=`get_line | grep Installing | awk -F[\(\)\ ] '{ print $3 }'`
			fi
			percent=$((100*($emerging+$installing)/$total))

			echo "$percent"
		done | zenity --progress --width=500 --title "Ugrading your system" --auto-close --text "Calculating upgrade..."
	fi

	if [ $? -gt 0 ]; then
		sudo pkill emerge
		exit 1
	fi

else
	[ $QUIET -eq 0 ] && QUIET='' || QUIET='q'
	[ $VERBOSE -eq 0 ] && VERBOSE='' || VERBOSE='v'
	emerge -a${QUIET}${VERBOSE}uDN ${SET}
fi

if [ $? -gt 0 ]; then
	text1="An error occurred on compilation time"
	text2=", please check logs for more information"
	if [ $X -eq 0 ]; then echo -e "${red}${text1}${normal}, ${text2}"
	else zenity --info --width 500 --title "Error" echo "<span color=\"red\">${text1}</span>${text2}"
	fi
	exit 3
fi

[ $X -gt 0 ] && zenity --info --width 500 --title "Upgrade" --text "Your system is now up to date"

exit 0
