#!/bin/bash
# Script to sync && upgrade Gentoo portage
configPath="/usr/lib"
if [ -f "${configPath}/shell-text.cnf" ]; then
	source "${configPath}/shell-text.cnf"
fi
iconPath="/usr/share/icons/hicolor/64x64/apps/upgrade-portage.png"
if [ ! -f "${iconPath}" ]; then
	iconPath="`dirname \"$0\"`/upgrade-portage.png"
fi
worldFile="/var/lib/portage/world"
declare -A tmpFile=( ['logs']="/tmp/upgrade-portage.log" ['zenity']="/tmp/zenity-progress.log" ['result']="/tmp/portage-result" )

# Functions
set_param () {
	case "$1" in
	 's'|'sync')
		[ $2 -eq 0 ] && SYNC=0 || SYNC=1
		;;
	 'q'|'quiet')
		[ $2 -eq 0 ] && QUIET=0 || QUIET=1
		;;
	 'v'|'verbose')
		[ $2 -eq 0 ] && VERBOSE=0 || VERBOSE=1
		;;
	 'x')
		[ $2 -eq 0 ] && X=0 || X=1
		;;

	 *)
		echo -e "${red}An error occurred while setting parameters${normal}"
		return 1
		;;
	esac
return 0
}

# get last log line
get_line () {
	if [ $# -gt 0 ]; then
		grep "$1" "${tmpFile["logs"]}" | sed -n '$p'
	else
		grep -v "^$" "${tmpFile["logs"]}" | sed -n '$p'
	fi
#	tail -1 "${tmpFile["logs"]}"
}
# print line in zenity
print_line () {
	if [ $# -gt 0 ] && [ "$1" = "-n" ]; then
		echo -ne `grep -v "^$" "${tmpFile["logs"]}" | sed -n '$ s/^/# /p' | sed 's/*//g'`
	else echo `grep -v "^$" "${tmpFile["logs"]}" | sed -n '$ s/^/# /p' | sed 's/*//g'`
	fi
}

# kill functions and delete tmp files
## prepare_for_exit [function-to-kill] [...]
prepare_for_exit () {
	# get params
	if [ $# -gt 0 ]; then
		functions=( "$@" )
	else functions=( )	
	fi

	# kill launched function
	for func in "${functions[@]}"; do
		echo "Canceled ${func}"
		pkill "${func}"
	done
	# delete tmp files
	for file in ${tmpFile[@]}; do
		[ -f "${file}" ] && rm "${file}"
	done
	return 0
}

# Initialisation
SET='@world'
set_param 'x' 0
set_param 'q' 0
set_param 'v' 0
set_param 's' 1
UPGRADE_NEEDED=1

# Get parameters
while [ "$#" -gt 0 ]; do
	case "$1" in
          "-h"|"--help")
                # HELP
                help=$( cat << HELP
${bold}Script for upgrading Gentoo${normal}
Usage : ${Blue}upgrade${normal} [${Green}OPTIONS${normal}] [${Green}@SET${normal}]

${Green}OPTIONS${normal} :
        ${bold}-h|--help${normal}	Print this help and exit
        ${bold}-q|--quiet${normal}    	Run quietly
        ${bold}-v|--verbose${normal}    Run verbosely
        ${bold}-x${normal}    Run graphically

${Green}SET${normal} :
	Set to upgrade, if not set ${green}@world${normal} will be used

HELP
)
                echo -e "$help"
                exit 0
                ;;

	 @*)
		SET=$1
		;;

	 '-x')
		set_param 'x' 1 && set_param 'q' 1 && set_param 'v' 0 && break || exit 255
		;;
	 '-q'|'--quiet')
		set_param 'q' 1 || exit 255
		;;
	 '-v'|'--verbose')
		set_param 'v' 1 || exit 255
		;;

	 '-qv'|'-vq')
		set_param 'q' 1 && set_param 'v' 1 || exit 255
		;;

	 *)
		echo -e "${red}Unknown parameter ${1}${normal}, exiting..." && exit 255
		;;
	esac
	shift
done

# Check if genlop exists
if [ $X -gt 0 ]; then
       type genlop &> /dev/null && ESTIMATE=1 || ESTIMATE=0
fi

# Get repos locations
echo "### $(date) ###"
repos=( $( grep location /etc/portage/repos.conf/* | cut -d '=' -f2 ) )

# Search for last sync timestamps
last=0
text="Checking repositories..."
echo -e "${green}${text}${normal}"
for i in "${!repos[@]}"; do
	if [ -f "${repos[$i]}/Manifest" ]; then
		time[$i]=$( date -d `grep TIMESTAMP "${repos[$i]}/Manifest" | cut -d ' ' -f2` "+%s" )
		text="Last sync for ${repos[$i]##*/} is `date -d @${time[$i]}`"
		[ $QUIET -gt 0 ] && [ $VERBOSE -eq 0 ] || echo "${text}"

		if [ ${time[$i]} -gt `date '+%s'` ]; then
			text1="Sync date for ${repos[$i]##*/} is newer than now"
			text2=", please correct your local time"
			[ $X -eq 0 ] &&	echo -e "${red}${text1}${normal}${text2}" || zenity --width=500 --window-icon "${iconPath}" --error --title "Time error" --text "<span color=\"red\">${text1}</span>${text2}"
			echo "Exiting..."
			exit 1
		fi

	else
		text="Unknown last sync for ${repos[$i]##*/}"
		[ $VERBOSE -eq 0 ] || echo "${text}"
	fi
done
for time in "${time[@]}"; do
	if [ $time -gt $last ]; then
		last=$time
	fi
done

# + 1 day
((last+=86400))
now=$(date "+%s")
# less than 1 day
if [ $now -lt $last ]; then

	text1="Your last sync is newer than 1 day"
	text2="Do you want to sync again ?"
	text3="-->" 

	if [ $X -eq 0 ]; then
		echo "${bold}${text1}${normal}. ${text2} (y/N)"
		while true;	do

			read -p "${text3}" ans

			case "$ans" in
				[nN]*|'')
					SYNC=0
					break 2
					;;

				[yY]*)
					break 2
					;;

				*)
					echo "Unknown answer (y/N ?)"
					;;

			esac
		done
	else
		if zenity --width=300 --window-icon "${iconPath}" --question --title "${text1}" --text "${text2}" --default-cancel; then
			SYNC=1
		else SYNC=0
		fi
	fi
	text="Last sync newer than 24h, "
	[ $SYNC -eq 0 ] && echo "${text}skipping sync" || echo "${text}forcing sync"
fi

# Sync
if [ $SYNC -gt 0 ]; then
	text="Syncing repositories"
	echo -e "${green}${text}...${normal}"
	if [ $X -eq 0 ]; then
		emerge --sync
		[ $? -gt 0 ] && exit 2
	else
		( touch "${tmpFile["zenity"]}" && emerge --sync 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
		sleep .5
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			print_line
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

		[ $? -gt 0 ] && prepare_for_exit rsync emerge
		[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while syncing, please check logs" && prepare_for_exit && exit 2
		cat "${tmpFile["logs"]}"
	fi
fi

# Upgrade
text="Checking for upgrades"
echo -e "${green}${text}...${normal}"
if [ $X -gt 0 ]; then

	# first check for news
	news=$( emerge -q --check-news )
	if [ ! -z "${news}" ]; then
		eselect news list | sed -n 's/ N //p' > "${tmpFile["logs"]}"
		index=( $( cut -d[ -f2 "${tmpFile["logs"]}" | cut -d] -f1) )
		for i in ${!index[@]}; do
			read date[$i] title[$i] <<< $( sed -n "$(( $i+1 ))p" "${tmpFile["logs"]}" | awk '{for (i=2; i<=NF; i++) printf "%s " ,$i }' )
		done

		choix=( $(
			for i in ${!index[@]}; do
				echo -e "FALSE\n${index[$i]}\n${title[$i]}\n${date[$i]}"
			done | zenity --width 500 --height 300 --window-icon "${iconPath}" --list --checklist --column 'read' --column 'index' --column 'Title' --column 'Date' --hide-column 2 --separator ' ' --title "Here are news" --text "Check those you want to read now" ) )

		for i in ${!choix[@]}; do
			eselect news read ${choix[$i]} | zenity --width=500 --window-icon "${iconPath}" --text-info --height=300 --title "${title[$i]}"
			[ $? -gt 0 ] && eselect news unread ${choix[$i]}
		done
	fi	

	# next, check for upgrades
	( touch "${tmpFile["zenity"]}" && emerge -pquDN ${SET} 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
	sleep .5
	dots=""
	while [ -f "${tmpFile["zenity"]}" ]
	do
		sleep .5
		echo "# Calculating dependencies ${dots}"
		[ "$dots" = "..." ] && dots="" || dots="${dots}."
	done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

	[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
	[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while checking dependencies, please check logs" && prepare_for_exit && exit 3
	cat "${tmpFile["logs"]}"

	if [ ! -s "${tmpFile["logs"]}" ]; then
		prepare_for_exit && UPGRADE_NEEDED=0

	else
		avg=0   #average estimations
		nb=0    #number of found packages

		# list of all packages that would be merged
		list=( $( sed '/^\[/!d' "${tmpFile["logs"]}" | cut -d[ -f2 | cut -d] -f2 ) )
		# prepare output and ask for final choice
		for i in ${!list[@]}; do
			package[$i]=${list[$i]%-[0-9]*}
			version[$i]=${list[$i]##*[a-zA-Z]-}
			action[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile["logs"]}" | cut -d' ' -f2- | cut -d] -f1 )
			current[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile["logs"]}" | cut -d[ -f3 | cut -d] -f1 )
			grep ${package[$i]} ${worldFile} >/dev/null && action[$i]="* ${action[$i]} *"
			
			# Build time estimation
			if [ $ESTIMATE -gt 0 ]; then
				# estimate each time
				echo "# Estimating merge time for ${package[$i]}"
				time[$i]=0; time_h[$i]=""
				est=( $( genlop -nt ${package[$i]} | sed -n 's/ *merge time: //p' | tail -1 ) )
				
				j=0
				while [ $j -lt ${#est[@]} ]; do
					chk=${est[$j]}
					#test if number
					if [ $chk -eq $chk ] 2>/dev/null; then
						unit=${est[$j+1]}
						#find unit
						case $unit in
						 day*)
							mult=86400
							time_h[$i]="${time_h[$i]}${chk}d "
							;;
						 hour*)
						 	mult=3600
						 	time_h[$i]="${time_h[$i]}${chk}h"
						 	;;
						 minute*)
						 	mult=60
						 	time_h[$i]="${time_h[$i]}${chk}m"
						 	;;
						 second*)
						 	mult=1
						 	time_h[$i]="${time_h[$i]}${chk}s"
						 	;;
						 *)
							mult=0
						 	;;
						esac

						#calc
						time[$i]=$(( ${time[$i]} + $mult*$chk ))
						#shift
						j=$(( $j+1 ))
					fi
					#shift
					j=$(( $j+1 ))
				done
			
				# prepare average time
				if [ ${time[$i]} -gt 0 ]; then
					avg=$(( $avg+${time[$i]} ))
					nb=$(( $nb+1 ))
				fi
			fi
		done
		
		# average time
		if [ $nb -gt 0 ] && [ $avg -gt 0 ]; then
			avg=$(( $avg/$nb ))
		else avg=10
		fi
		for i in ${!list[@]}; do
			[ ${time[$i]} -eq 0 ] && time[$i]=$avg && time_h[$i]="???"
		done
		
		text="Uncheck packages you want to exclude\n"
		text+=$( sed '/^\[/d' "${tmpFile["logs"]}" )
		if [ $ESTIMATE -gt 0 ]; then
			choix=( $(
				for i in ${!list[@]}; do
				echo -e "TRUE\n${package[$i]}\n${action[$i]}\n${version[$i]}\n${current[$i]}\n${time_h[$i]}"
				done | zenity --width 650 --height 300 --window-icon "${iconPath}" --list --checklist --column 'merge' --column 'package' --column 'action' --column 'version' --column 'current' --column 'estimated time' --separator ' ' --title "Here are packages that would be merged" --text "${text}" )
			)
		else
			choix=( $(
				for i in ${!list[@]}; do
				echo -e "TRUE\n${package[$i]}\n${action[$i]}\n${version[$i]}\n${current[$i]}"
				done | zenity --width 600 --height 300 --window-icon "${iconPath}" --list --checklist --column 'merge' --column 'package' --column 'action' --column 'version' --column 'current' --separator ' ' --title "Here are packages that would be merged" --text "${text}" )
			)
		fi
		
		if [ "$?" -gt 0 ]; then
			echo "Aborted"
			prepare_for_exit
			exit 1
		fi

		# get excluded packages list
		exclude=""
		if [[ "${package[@]}" != "${choix[@]}" ]]; then
			j=0
			for i in ${!list[@]}; do
				if [ "${choix[$j]}" = "${package[$i]}" ]; then
					j=$(( $j+1 ))
				else
					exclude+=" --exclude ${package[$i]}"
					time=( ${time[@]:0:$i} ${time[@]:$i+1} )
				fi
			done
		fi
		unset list package version action current time_h

		# total time
		total=0
		for i in ${!choix[@]}; do
			total=$(( $total+${time[$i]} ))
		done

		# finally emerge
		text="Upgrading your system"
		echo -e "${green}${text}...${normal}"
		# get portage log file size
		portage_log="/var/log/portage/elog/summary.log"
		[ -f "${portage_log}" ] && last_line=$( wc -l < "${portage_log}" ) || last_line=0

		( touch "${tmpFile["zenity"]}" && emerge -quDN ${exclude} ${SET} 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
		sleep 1
		emerging=0; installing=0
		percent=0; elapsed=0;
		elapsed_h=( ['d']=0 ['h']=0 ['m']=0 ['s']=0 )
		
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep 1
			edited=0

			new=$( get_line Emerging | awk -F[\(\)\ ] '{ print $4 }' )
			[ ! -z $new ] && [ $new -gt $emerging ] && emerging=$new && edited=1

			new=$( get_line Installing | awk -F[\(\)\ ] '{ print $4 }' )
			[ ! -z $new ] && [ $new -gt $installing ] && installing=$new && edited=1

			if [ $emerging -gt 0 ]; then
				# human readable elapsed time
				elapsed_h["s"]=$(( ${elapsed_h["s"]}+1 ))
				if [ ${elapsed["s"] -gt 59 ]; then
					elapsed_h["m"]=$(( ${elapsed["m"]}+1 ))
					elapsed_h["s"]=0
					if [ ${elapsed["m"]} -gt 59 ]; then
						elapsed["h"]=$(( ${elapsed["h"]}+1 ))
						elapsed["m"]=0
						if [ ${elapsed["h"]} -gt 23 ]; then
							elapsed["d"]=$(( ${elapsed["d"]+1 ))
							elapsed["h"]=0
						fi
					fi
				fi
				print_line -n
				print=" "
				[ ${elapsed["d"]} -gt 0 ] && print="${print}${elapsed["d"]} days "
				[ ${elapsed["d"]} -gt 0 ] || [ ${elapsed["h"]} -gt 0 ] && print="${print}${elapsed["h"]}:"
				[ ${elapsed["m"]} -gt 9 ] && print="${print}${elapsed["m"]}:" || print="${print}0${elapsed["m"]}:"
				[ ${elapsed["s"]} -gt 9 ] && print="${print}${elapsed["s"]}:" || print="${print}0${elapsed["s"]}"				
				echo -ne "${print}\r"
			else
				print_line
			fi

			if [ $edited -gt 0 ]; then
				cur_package=$( get_line | awk -F' ' '{ print $6 }' )
				cur_package=${cur_package%-[0-9]*}
				
				for i in ${!choix[@]}; do
					if [ "${choix[$i]}" = "${cur_package}" ]; then
						if [ $installing -eq $emerging ]; then
							add=$(( 8*${time[$i]}/10 ))
						elif [ $installing -gt 0 ]; then
							add=$(( 2*${time[$i]}/10 ))
						else add=0
						fi
						elapsed=$(( $elapsed + $add ))
						break
					fi
				done
				percent=$(( 100*${elapsed}/${total} ))
			fi

			echo "$percent"
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --auto-close --text "Calculating upgrade ..."

		[ $? -gt 0 ] && prepare_for_exit emerge && exit 1

		unset choix time

		# Print messages from emerging
		if [ -f "${portage_log}" ]; then
			# $message is a table of a new messages lines
			message=( $( grep -Fn '>>>' "${portage_log}" | awk -F: '{print $1}' ) )
			for i in ${!message[@]}; do
				if [ $last_line -ge ${message[$i]} ]; then continue; fi
				#get package
				package[$i]=$( sed -n "${message[$i]} s/^.*package \(.*\):$/\1/p" "${portage_log}" )
				start=$(( ${message[$i]}+1 ))
				[ $i -eq $(( ${#message[@]}-1 )) ] && end='$' || end=$(( ${message[$i+1]}-1 ))
				
				#print message
				#sed -n "${start},${end}p" "${portage_log}" | sed 's/^\(ERROR.*\)$/<span color="red">\1<\/span>/' | sed 's/^\(WARN.*\)$/<span color="orange">\1<\/span>/' | sed 's/^\(LOG.*\)$/<span color="green">\1<\/span>/' \
				sed -n "${start},${end}p" "${portage_log}" \
				| zenity --width 500 --height 300 --window-icon "${iconPath}" --text-info --title "Messages from ${package[$i]}"
			done
		fi
		[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while upgrading system, please check logs" && prepare_for_exit && exit 4
		cat "${tmpFile["logs"]}"

		if [ ! -z "${exclude}" ] || [ ! "${SET}" = "@world" ]; then
			text="Upgrade have terminated"
			zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "${text}"
			exit 0
		fi
	fi

# Standard upgrade
else
	[ $QUIET -eq 0 ] && QUIET='' || QUIET='q'
	[ $VERBOSE -eq 0 ] && VERBOSE='' || VERBOSE='v'
	emerge -a${QUIET}${VERBOSE}uDN ${SET}

	if [ $? -gt 0 ]; then
		text1="An error occurred on compilation time"
		text2="please check logs for more information"
		echo -e "${red}${text1}${normal}, ${text2}"
		exit 4
	fi
fi

# Depclean
if [ -z $exclude ] && [ "$SET" = "@world" ]; then
	text="Preparing for cleaning"
	echo -e "${green}${text}...${normal}"
	if [ $X -gt 0 ]; then
		
		# first check
		( touch "${tmpFile["zenity"]}" && emerge -pqc 2>&1 > "${tmpFile["logs"]}"; rm "${tmpFile["zenity"]}" ) &
		sleep .5
		dots=""
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			echo "# Checking for obsolete packages ${dots}"
			[ "$dots" = "..." ] && dots="" || dots="${dots}."
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

		[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
		cat "${tmpFile["logs"]}"

		if [ -s "${tmpFile["logs"]}" ]; then
			remove=$( sed -n '$p' "${tmpFile["logs"]}" | awk -F ' ' '{print $4}' )
			# remove unwanted lines from output
			sed -i '/\//!d' "${tmpFile["logs"]}"
			sed -i '/=/d' "${tmpFile["logs"]}"			

			package=( $( cut -d: -f1 "${tmpFile["logs"]}" ) )
			for i in ${!package[@]}; do
				versions[$i]=$( sed -n "$(( ${i}+1 ))p" "${tmpFile["logs"]}" | cut -d: -f2 )
				read selected[$i] protected[$i] omitted[$i] <<< "${versions[$i]}"
			done
			
			choix=( $(
				for i in ${!package[@]}; do
					echo -e "TRUE\n${package[$i]}\n${selected[$i]}\n${protected[$i]}\n${omitted[$i]}"
				done | zenity --width 500 --height 300 --window-icon "${iconPath}" --list --checklist --column 'remove' --column 'package' --column 'version' --column 'protected' --column 'omitted' --separator ' ' --title "${remove} packages would be unmerged" --text "Uncheck package you want to preserve" ) )
			if [ "$?" -gt 0 ]; then
				echo "Aborted"
				prepare_for_exit
				exit 1
			fi

			# get excluded packages list
			exclude=""
			if [[ "${package[@]}" != "${choix[@]}" ]]; then
				j=0
				for i in ${!package[@]}; do
					if [ "${choix[$j]}" = "${package[$i]}" ]; then
						j=$(( $j+1 ))
					else
						exclude+=" --exclude ${package[$i]}"
					fi
				done
			fi
			unset remove package selected protected omitted

			# finally clean
			text="Cleaning your system"
			echo -e "${green}${text}...${normal}"
			( touch "${tmpFile["zenity"]}" && emerge -qc $exclude 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
			sleep .5
			cleaning=0
			percent=0
			while [ -f "${tmpFile["zenity"]}" ]
			do
				sleep .5
				print_line
				new=`get_line "Unmerging (" | awk -F[\(\)\ ] '{ print $4 }'`
				[ "$new" = "" ] || cleaning=$new

				if [ -z $total ]; then
					[ "$new" = "" ] || total=`grep "Unmerging (" "${tmpFile["logs"]}" | awk -F[\(\)\ ] '{ print $6 }'`
				fi
				[ -z $total ] || percent=$((100*($cleaning-1)/$total))
				echo "$percent"
			done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --auto-close --text ""

			[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
			[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while cleaning system, please check logs" && prepare_for_exit && exit 5
			if [ ! -s "${tmpFile["logs"]}" ] && [ $UPGRADE_NEEDED -gt 0 ]; then
				UPGRADE_NEEDED=0
			else
				UPGRADE_NEEDED=1 && cat "${tmpFile["logs"]}"
			fi
		fi

	# Standard cleaning
	else
		emerge -a${QUIET}${VERBOSE}c || exit 5
	fi
fi

# Finished
if [ $UPGRADE_NEEDED -eq 0 ]; then
	text="Your system is already up to date"
else
	text="Your system is now up to date"
fi
[ $X -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "${text}" && prepare_for_exit
echo "${text}"

exit 0
