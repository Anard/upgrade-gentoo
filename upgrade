#!/bin/bash
# Script to sync && upgrade Gentoo portage
configPath="/usr/lib"
if [ -f "${configPath}/shell-text.cnf" ]; then
	source "${configPath}/shell-text.cnf"
fi
iconPath="/usr/share/icons/hicolor/64x64/apps/upgrade-portage.png"
declare -A tmpFile=( ['logs']="/tmp/upgrade-portage.log" ['zenity']="/tmp/zenity-progress.log" )

# Functions
set_param () {
	case "$1" in
	 's'|'sync')
		[ $2 -eq 0 ] && SYNC=0 || SYNC=1
		;;
	 'q'|'quiet')
		[ $2 -eq 0 ] && QUIET=0 || QUIET=1
		;;
	 'v'|'verbose')
		[ $2 -eq 0 ] && VERBOSE=0 || VERBOSE=1
		;;
	 'x')
		[ $2 -eq 0 ] && X=0 || X=1
		;;

	 *)
		echo -e "${red}An error occurred while setting parameters${normal}"
		return 1
		;;
	esac
return 0
}

# get last log line
get_line () {
	tail -1 "${tmpFile["logs"]}"
}
# print line in zenity
print_line () {
	echo `get_line | grep -v "^$" | sed 's/^/# /' | sed 's/*//g'`
}

# kill functions and delete tmp files
## prepare_for_exit [function-to-kill] [...]
prepare_for_exit () {
	# get params
	if [ $# -gt 0 ]; then
		functions=( "$@" )
	else functions=( )	
	fi

	# kill launched function
	for i in "${!functions[@]}"; do
		echo "Canceled ${functions[$i]}"
		pkill "${functions[$i]}"
	done
	# delete tmp files
	for i in ${!tmpFile[@]}; do
		[ -f "${tmpFile[$i]}" ] && rm "${tmpFile[$i]}"
	done
	return 0
}

# Initialisation
SET='@world'
set_param 'x' 0
set_param 'q' 0
set_param 'v' 0
set_param 's' 1

# Get parameters
while [ "$#" -gt 0 ]; do
	case "$1" in
          "-h"|"--help")
                # HELP
                help=$( cat << HELP
${bold}Script for upgrading Gentoo${normal}
Usage : ${Blue}upgrade${normal} [${Green}OPTIONS${normal}] [${Green}@SET${normal}]

${Green}OPTIONS${normal} :
        ${bold}-h|--help${normal}	Print this help and exit
        ${bold}-q|--quiet${normal}    	Run quietly
        ${bold}-v|--verbose${normal}    Run verbosely
        ${bold}-x${normal}    Run graphically

${Green}SET${normal} :
	Set to upgrade, if not set ${green}@world${normal} will be used

HELP
)
                echo -e "$help"
                exit 0
                ;;

	 @*)
		SET=$1
		;;

	 '-x')
		set_param 'x' 1 && set_param 'q' 1 && set_param 'v' 0 && break || exit 255
		;;
	 '-q'|'--quiet')
		set_param 'q' 1 || exit 255
		;;
	 '-v'|'--verbose')
		set_param 'v' 1 || exit 255
		;;

	 '-qv'|'-vq')
		set_param 'q' 1 && set_param 'v' 1 || exit 255
		;;

	 *)
		echo -e "${red}Unknown parameter ${1}${normal}, exiting..." && exit 255
		;;
	esac
	shift
done

# Get repos locations
echo
echo "### $(date) ###"
repos=( $( grep location /etc/portage/repos.conf/* | cut -d '=' -f2 ) )

# Search for last sync timestamps
last=0
text="Checking repositories..."
echo -e "${green}${text}${normal}"
for i in "${!repos[@]}"; do
	if [ -f "${repos[$i]}/Manifest" ]; then
		time[$i]=$( date -d `grep TIMESTAMP "${repos[$i]}/Manifest" | cut -d ' ' -f2` "+%s" )
		text="Last sync for ${repos[$i]##*/} is `date -d @${time[$i]}`"
		[ $QUIET -gt 0 ] && [ $VERBOSE -eq 0 ] || echo "${text}"

		if [ ${time[$i]} -gt `date '+%s'` ]; then
			text1="Sync date for ${repos[$i]##*/} is newer than now"
			text2=", please correct your local time"
			[ $X -eq 0 ] &&	echo -e "${red}${text1}${normal}${text2}" || zenity --width=500 --window-icon "${iconPath}" --error --title "Time error" --text "<span color=\"red\">${text1}</span>${text2}"
			echo "Exiting..."
			exit 1
		fi

	else
		text="Unknown last sync for ${repos[$i]##*/}"
		[ $VERBOSE -eq 0 ] || echo "${text}"
	fi
done
for i in "${!time[@]}"; do
	if [ ${time[$i]} -gt $last ]; then
		last=${time[$i]}
	fi
done

# + 1 day
((last+=86400))
now=$(date "+%s")
# less than 1 day
if [ $now -lt $last ]; then

	text1="Your last sync is newer than 1 day"
	text2="Do you want to sync again ?"
	text3="-->" 

	if [ $X -eq 0 ]; then
		echo "${bold}${text1}${normal}. ${text2} (y/N)"
		while true;	do

			read -p "${text3}" ans

			case "$ans" in
				[nN]*|'')
					SYNC=0
					break 2
					;;

				[yY]*)
					break 2
					;;

				*)
					echo "Unknown answer (y/N ?)"
					;;

			esac
		done
	else
		if zenity --width=300 --window-icon "${iconPath}" --question --title "${text1}" --text "${text2}" --default-cancel; then
			SYNC=1
		else SYNC=0
		fi
	fi
	text="Last sync newer than 24h, "
	[ $SYNC -eq 0 ] && echo "${text}skipping sync" || echo "${text}forcing sync"
fi

# Sync
if [ $SYNC -gt 0 ]; then
	text="Syncing repositories"
	echo -e "${green}${text}...${normal}"
	if [ $X -eq 0 ]; then
		emerge --sync
		[ $? -gt 0 ] && exit 2
	else
		( touch "${tmpFile["zenity"]}" && emerge --sync 2>&1 > "${tmpFile["logs"]}" && rm "${tmpFile["zenity"]}" ) &
		sleep .5
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			print_line
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

		[ $? -gt 0 ] && prepare_for_exit emerge
		[ -f "${tmpFile["zenity"]}" ] && zenity --width 500 --window-icon "${iconFile}" --error --title "Error" --text "An error occurred while syncing, please check logs" && prepare_for_exit && exit 2
		cat "${tmpFile["logs"]}"
	fi
fi

# Upgrade
text="Checking for upgrades"
echo -e "${green}${text}...${normal}"
if [ $X -gt 0 ]; then
	
	# first check
	( touch "${tmpFile["zenity"]}" && emerge -pquDN ${SET} 2>&1 > "${tmpFile["logs"]}" && rm "${tmpFile["zenity"]}" ) &
	sleep .5
	dots=""
	while [ -f "${tmpFile["zenity"]}" ]
	do
		sleep .5
		echo "# Calculating dependencies ${dots}"
		[ "$dots" = "..." ] && dots="" || dots="${dots}."
	done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

	[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
	[ -f "${tmpFile["zenity"]}" ] && zenity --width 500 --window-icon "${iconFile}" --error --title "Error" --text "An error occurred while checking dependencies, please check logs" && prepare_for_exit && exit 3
	cat "${tmpFile["logs"]}"

	if [ ! -s "${tmpFile["logs"]}" ]; then
		zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "Your system is already up to date"
		prepare_for_exit && exit 0

	else
		# news item unread
		news=`grep "news items need reading" "${tmpFile["logs"]}" | sed 's/*//' `
		if [ ! "$news" = "" ]; then
			if zenity --width=500 --window-icon "${iconPath}" --question --title "Warning" --text "<span color=\"red\">${news}</span> Do you want to read it now ?" --cancel-label "Non" --ok-label "Oui"; then
				eselect news read | zenity --width=500 --window-icon "${iconPath}" --text-info --height=300 --title "News"
			fi
		fi

		# remove news lines from output & ask
		sed '/*/d' "${tmpFile["logs"]}" | zenity --width=500 --height=300 --window-icon "${iconPath}" --text-info --title "Here are packages that need updates"
		if [ "$?" -gt 0 ]; then
			echo "Aborted"
			prepare_for_exit
			exit 1
		fi
	
		# finally emerge
		text="Upgrading your system"
		echo -e "${green}${text}...${normal}"
		( touch "${tmpFile["zenity"]}" && emerge -quDN ${SET} 2>&1 > "${tmpFile["logs"]}" && rm "${tmpFile["zenity"]}" ) &
		sleep .5
		emerging=0		
		installing=0
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			print_line
			new=`get_line | grep Emerging | awk -F[\(\)\ ] '{ print $4 }'`
			[ "$new" = "" ] || emerging=$new

			if [ -z $total ]; then
				[ "$new" = "" ] || total=`grep Emerging "${tmpFile["logs"]}" | awk -F[\(\)\ ] '{ print $6 }'`
				[ -z $total ] || total=$((2*$total))
			fi
			new=`get_line | grep Installing | awk -F[\(\)\ ] '{ print $4 }'`
			[ "$new" = "" ] || installing=$new
			[ -z $total ] || percent=$((100*($emerging+$installing)/$total))
			echo "$percent"
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --auto-close --text "Calculating upgrade ..."

		[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
		[ -f "${tmpFile["zenity"]}" ] && zenity --width 500 --window-icon "${iconFile}" --error --title "Error" --text "An error occurred while upgrading system, please check logs" && prepare_for_exit && exit 4
		cat "${tmpFile["logs"]}"
	fi

# Standard upgrade
else
	[ $QUIET -eq 0 ] && QUIET='' || QUIET='q'
	[ $VERBOSE -eq 0 ] && VERBOSE='' || VERBOSE='v'
	emerge -a${QUIET}${VERBOSE}uDN ${SET}
fi

if [ $? -gt 0 ]; then
	text1="An error occurred on compilation time"
	text2="please check logs for more information"
	if [ $X -eq 0 ]; then echo -e "${red}${text1}${normal}, ${text2}"
	else zenity --width 500 --window-icon "${iconPath}" --info --title "Error" echo "<span color=\"red\">${text1}</span>, ${text2}"
	fi
	echo "${text1}, ${text2}"
	exit 4
fi

# Depclean
if [ "$SET" = "@world" ]; then
	text="Preparing for cleaning"
	echo -e "${green}${text}...${normal}"
	if [ $X -gt 0 ]; then
		
		# first check
		( touch "${tmpFile["zenity"]}" && emerge -pqc 2>&1 > "${tmpFile["logs"]}" && rm "${tmpFile["zenity"]}" ) &
		sleep .5
		dots=""
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			echo "# Checking for obsolete packages ${dots}"
			[ "$dots" = "..." ] && dots="" || dots="${dots}."
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

		[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
		cat "${tmpFile["logs"]}"

		if [ -s "${tmpFile["logs"]}" ]; then

			sed 's/*//' "${tmpFile["logs"]}" | zenity --width=500 --height=300 --window-icon "${iconPath}" --text-info --title "Here are packages that will be removed"
			if [ $? -gt 0 ]; then
				echo "Aborted"
				prepare_for_exit
				exit 1
			fi
		
			# finally clean
			text="Cleaning your system"
			echo "${green}${text}...${normal}"
			( touch "${tmpFile["zenity"]}" && emerge -qc 2>&1 > "${tmpFile["logs"]}" && rm "${tmpFile["zenity"]}" ) &
			sleep .5
			cleaning=0
			while [ -f "${tmpFile["zenity"]}" ]
			do
				sleep .5
				print_line
				new=`get_line | grep "Unmerging (" | awk -F[\(\)\ ] '{ print $4 }'`
				[ "$new" = "" ] || cleaning=$new

				if [ -z $total ]; then
					[ "$new" = "" ] || total=`grep "Unmerging (" "${tmpFile["logs"]}" | awk -F[\(\)\ ] '{ print $6 }'`
				fi
				[ -z $total ] || percent=$((100*$cleaning/$total))
				echo "$percent"
			done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --auto-close --text ""

			[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
			[ -f "${tmpFile["zenity"]}" ] && zenity --width 500 --window-icon "${iconFile}" --error --title "Error" --text "An error occurred while cleaning system, please check logs" && prepare_for_exit && prepare_for_exit && exit 5
			cat "${tmpFile["logs"]}"
		fi

	# Standard cleaning
	else
		emerge -a${QUIET}${VERBOSE}c || exit 5
	fi
fi

# Finished
text="Your system is now up to date"
[ $X -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "${text}"
echo "${text}"

exit 0
