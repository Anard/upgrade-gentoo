#!/bin/bash
# Script to sync && upgrade Gentoo portage
configPath="/usr/lib"
if [ -f "${configPath}/shell-text.cnf" ]; then
	source "${configPath}/shell-text.cnf"
fi
iconPath="/usr/share/icons/hicolor/64x64/apps/upgrade-portage.png"
if [ ! -f "${iconPath}" ]; then
	iconPath="`dirname \"$0\"`/upgrade-portage.png"
fi
declare -A tmpFile=( ['logs']="/tmp/upgrade-portage.log" ['zenity']="/tmp/zenity-progress.log" ['result']="/tmp/portage-result" )

# Functions
set_param () {
	case "$1" in
	 's'|'sync')
		[ $2 -eq 0 ] && SYNC=0 || SYNC=1
		;;
	 'q'|'quiet')
		[ $2 -eq 0 ] && QUIET=0 || QUIET=1
		;;
	 'v'|'verbose')
		[ $2 -eq 0 ] && VERBOSE=0 || VERBOSE=1
		;;
	 'x')
		[ $2 -eq 0 ] && X=0 || X=1
		;;

	 *)
		echo -e "${red}An error occurred while setting parameters${normal}"
		return 1
		;;
	esac
return 0
}

# get last log line
get_line () {
	if [ $# -gt 0 ]; then
		grep "$1" "${tmpFile["logs"]}" | sed -n '$p'
	else
		grep -v "^$" "${tmpFile["logs"]}" | sed -n '$p'
	fi
#	tail -1 "${tmpFile["logs"]}"
}
# print line in zenity
print_line () {
	echo `grep -v "^$" "${tmpFile["logs"]}" | sed -n '$ s/^/# /p' | sed 's/*//g'`
}

# kill functions and delete tmp files
## prepare_for_exit [function-to-kill] [...]
prepare_for_exit () {
	# get params
	if [ $# -gt 0 ]; then
		functions=( "$@" )
	else functions=( )	
	fi

	# kill launched function
	for func in "${functions[@]}"; do
		echo "Canceled ${func}"
		pkill "${func}"
	done
	# delete tmp files
	for file in ${tmpFile[@]}; do
		[ -f "${file}" ] && rm "${file}"
	done
	return 0
}

# Initialisation
SET='@world'
set_param 'x' 0
set_param 'q' 0
set_param 'v' 0
set_param 's' 1

# Get parameters
while [ "$#" -gt 0 ]; do
	case "$1" in
          "-h"|"--help")
                # HELP
                help=$( cat << HELP
${bold}Script for upgrading Gentoo${normal}
Usage : ${Blue}upgrade${normal} [${Green}OPTIONS${normal}] [${Green}@SET${normal}]

${Green}OPTIONS${normal} :
        ${bold}-h|--help${normal}	Print this help and exit
        ${bold}-q|--quiet${normal}    	Run quietly
        ${bold}-v|--verbose${normal}    Run verbosely
        ${bold}-x${normal}    Run graphically

${Green}SET${normal} :
	Set to upgrade, if not set ${green}@world${normal} will be used

HELP
)
                echo -e "$help"
                exit 0
                ;;

	 @*)
		SET=$1
		;;

	 '-x')
		set_param 'x' 1 && set_param 'q' 1 && set_param 'v' 0 && break || exit 255
		;;
	 '-q'|'--quiet')
		set_param 'q' 1 || exit 255
		;;
	 '-v'|'--verbose')
		set_param 'v' 1 || exit 255
		;;

	 '-qv'|'-vq')
		set_param 'q' 1 && set_param 'v' 1 || exit 255
		;;

	 *)
		echo -e "${red}Unknown parameter ${1}${normal}, exiting..." && exit 255
		;;
	esac
	shift
done

# Check if genlop exists
if [ $X -gt 0 ]; then
       type genlop &> /dev/null && ESTIMATE=1 || ESTIMATE=0
fi

# Get repos locations
echo "### $(date) ###"
repos=( $( grep location /etc/portage/repos.conf/* | cut -d '=' -f2 ) )

# Search for last sync timestamps
last=0
text="Checking repositories..."
echo -e "${green}${text}${normal}"
for i in "${!repos[@]}"; do
	if [ -f "${repos[$i]}/Manifest" ]; then
		time[$i]=$( date -d `grep TIMESTAMP "${repos[$i]}/Manifest" | cut -d ' ' -f2` "+%s" )
		text="Last sync for ${repos[$i]##*/} is `date -d @${time[$i]}`"
		[ $QUIET -gt 0 ] && [ $VERBOSE -eq 0 ] || echo "${text}"

		if [ ${time[$i]} -gt `date '+%s'` ]; then
			text1="Sync date for ${repos[$i]##*/} is newer than now"
			text2=", please correct your local time"
			[ $X -eq 0 ] &&	echo -e "${red}${text1}${normal}${text2}" || zenity --width=500 --window-icon "${iconPath}" --error --title "Time error" --text "<span color=\"red\">${text1}</span>${text2}"
			echo "Exiting..."
			exit 1
		fi

	else
		text="Unknown last sync for ${repos[$i]##*/}"
		[ $VERBOSE -eq 0 ] || echo "${text}"
	fi
done
for time in "${time[@]}"; do
	if [ $time -gt $last ]; then
		last=$time
	fi
done

# + 1 day
((last+=86400))
now=$(date "+%s")
# less than 1 day
if [ $now -lt $last ]; then

	text1="Your last sync is newer than 1 day"
	text2="Do you want to sync again ?"
	text3="-->" 

	if [ $X -eq 0 ]; then
		echo "${bold}${text1}${normal}. ${text2} (y/N)"
		while true;	do

			read -p "${text3}" ans

			case "$ans" in
				[nN]*|'')
					SYNC=0
					break 2
					;;

				[yY]*)
					break 2
					;;

				*)
					echo "Unknown answer (y/N ?)"
					;;

			esac
		done
	else
		if zenity --width=300 --window-icon "${iconPath}" --question --title "${text1}" --text "${text2}" --default-cancel; then
			SYNC=1
		else SYNC=0
		fi
	fi
	text="Last sync newer than 24h, "
	[ $SYNC -eq 0 ] && echo "${text}skipping sync" || echo "${text}forcing sync"
fi

# Sync
if [ $SYNC -gt 0 ]; then
	text="Syncing repositories"
	echo -e "${green}${text}...${normal}"
	if [ $X -eq 0 ]; then
		emerge --sync
		[ $? -gt 0 ] && exit 2
	else
		( touch "${tmpFile["zenity"]}" && emerge --sync 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
		sleep .5
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			print_line
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

		[ $? -gt 0 ] && prepare_for_exit rsync emerge
		[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while syncing, please check logs" && prepare_for_exit && exit 2
		cat "${tmpFile["logs"]}"
	fi
fi

# Upgrade
text="Checking for upgrades"
echo -e "${green}${text}...${normal}"
if [ $X -gt 0 ]; then

	# first check for news
	news=$( emerge -q --check-news )
	if [ ! -z "${news}" ]; then
		if zenity --width=500 --window-icon "${iconPath}" --question --title "Warning" --text "<span color=\"red\">${news} news items needs reading.</span> Do you want to read it now ?" --cancel-label "No" --ok-label "Yes"; then
			eselect news read | zenity --width=500 --window-icon "${iconPath}" --text-info --height=300 --title "News"
		fi
	fi	

	# next, check for upgrades
	( touch "${tmpFile["zenity"]}" && emerge -pquDN ${SET} 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
	sleep .5
	dots=""
	while [ -f "${tmpFile["zenity"]}" ]
	do
		sleep .5
		echo "# Calculating dependencies ${dots}"
		[ "$dots" = "..." ] && dots="" || dots="${dots}."
	done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

	[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
	[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while checking dependencies, please check logs" && prepare_for_exit && exit 3
	cat "${tmpFile["logs"]}"

	if [ ! -s "${tmpFile["logs"]}" ]; then
		text="Your system is already up to date"
		zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "${text}"
		echo "${text}"
		prepare_for_exit # && exit 0

	else
		# list of all packages that would be merged
		list=( $( sed '/^\[/!d' "${tmpFile["logs"]}" | cut -d[ -f2 | cut -d] -f2 ) )
		# prepare output and ask for final choice
		for i in ${!list[@]}; do
			package[$i]=${list[$i]%-[0-9]*}
			version[$i]=${list[$i]##*[a-z][A-Z]-}
			action[$i]=$( sed -n "$(( $i+1 ))" "${tmpFile["logs"]}" | cut -d' ' -f2- | cut -d] -f1 )
			current[$i]=$( sed -n "$(( $i+1 ))p" "${tmpFile["logs"]}" | cut -d[ -f3 | cut -d] -f1 )
		done

		text="Uncheck packages you want to exclude\n"
		text+=$( sed '/^\[/d' "${tmpFile["logs"]}" )
		choix=( $(
			for i in ${!list[@]}; do
				echo -e "TRUE\n${package[$i]}\n${action[$i]}\n${version[$i]}\n${current[$i]}"
			done | zenity --width 500 --height 300 --window-icon "${iconPath}" --list --checklist --column 'merge' --column 'package' --column 'action' --column 'version' --column 'current' --separator ' ' --title "Here are packages that would be merged" --text "${text}" ) )
		if [ "$?" -gt 0 ]; then
			echo "Aborted"
			prepare_for_exit
			exit 1
		fi

		# get excluded packages list
		exclude=""
		if [[ "${package[@]}" != "${choix[@]}" ]]; then
			j=0
			for i in ${!list[@]}; do
				if [ "${choix[$j]}" = "${package[$i]}" ]; then
					j=$(( $j+1 ))
				else
					exclude+=" --exclude ${package[$i]}"
				fi
			done
		fi
		unset list package version action current

		# Build time estimation
		avg=0   #average estimations
		nb=0    #number of known packages
		if [ $ESTIMATE -gt 0 ]; then
			# estimate each time
			for i in ${!choix[@]}; do
				echo "# Estimating merge time for ${choix[$i]}"
				echo $(( 100*${i}/${#choix[@]} ))
				time[$i]=0
				# ?????
				est=$( emerge -pu ${choix[$i]} | genlop -p | grep Estimated | cut -d' ' -f4, )
				while [ ! -z $est ]; do
					#test if number
					chk=${est%% *}
					if [ $chk -eq $chk ] 2>/dev/null; then
						mult=0
						#find unit
						while [ ! -z $est ] && [ $mult -eq 0 ]; do
							#shift
							est=${est#* }
							unit=${est%% *}
							case $unit in
							 ^hour)
							 	mult=3600
							 	;;
							 ^minute)
							 	mult=60
							 	;;
							 ^second)
							 	mult=1
							 	;;
							 *)
							 	;;
							esac
						done
						#calc
						time[$i]=$(( $mult*$chk+${time[$i]} ))
					fi
					#shift
					est=${est#* }
				done
			done | zenity --width 500 --window-icon "${iconPath}" --progress --auto-close --title "Estimating merge time" --text ""
			
			# get average times
			nb=${#time[@]}
			for time in ${time[@]}; do
				avg=$(( $avg+$time ))
			done
		fi
		
		if [ $nb -gt 0 ]; then
			avg=$(( $avg/$nb ))
		else avg=10
		fi
		
		total_time=0
		for i in ${!choix[@]}; do
			[ -z ${time[$i]} ] && time[$i]=$avg
			total_time=$(( $total+${time[$i]} ))
		done
		
		unset choix

		# finally emerge
		text="Upgrading your system"
		echo -e "${green}${text}...${normal}"
		# get portage log file size
		portage_log="/var/log/portage/elog/summary.log"
		[ -f "${portage_log}" ] && last_line=$( wc -l < "${portage_log}" ) || last_line=0

		( touch "${tmpFile["zenity"]}" && emerge -quDN ${exclude} ${SET} 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
		sleep .5
		emerging=0
		installing=0
		percent=0
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			print_line
			new=`get_line Emerging | awk -F[\(\)\ ] '{ print $4 }'`
			[ "$new" = "" ] || emerging=$new

#			if [ -z $total ]; then
#				[ "$new" = "" ] || total=`grep Emerging "${tmpFile["logs"]}" | awk -F[\(\)\ ] '{ print $6 }'`
#				[ -z $total ] || total=$((2*$total))
#			fi
			new=`get_line Installing | awk -F[\(\)\ ] '{ print $4 }'`
			[ "$new" = "" ] || installing=$new
#			[ -z $total ] || percent=$((100*($emerging+$installing-1)/$total))

			if [ $emerging -gt 0 ]; then
				[ $emerging -gt $installing ] && mult=8 || mult=10
				percent=$(( 10*${mult}*${time[$emerging-1]}/${total} ))
			else percent=0
			fi

			echo "$percent"
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --auto-close --text "Calculating upgrade ..."

		[ $? -gt 0 ] && prepare_for_exit emerge && exit 1

		# Print messages from emerging
		if [ -f "${portage_log}" ]; then
			# $message is a table of a new messages lines
			message=( $( grep -Fn '>>>' "${portage_log}" | awk -F: '{print $1}' ) )
			for i in ${!message[@]}; do
				if [ $last_line -ge ${message[$i]} ]; then continue; fi
				#get package
				package[$i]=$( sed -n "${message[$i]} s/^.*package \(.*\):$/\1/p" "${portage_log}" )
				start=$(( ${message[$i]}+1 ))
				[ $i -eq $(( ${#message[@]}-1 )) ] && end='$' || end=$(( ${message[$i+1]}-1 ))
				
				#print message
				#sed -n "${start},${end}p" "${portage_log}" | sed 's/^\(ERROR.*\)$/<span color="red">\1<\/span>/' | sed 's/^\(WARN.*\)$/<span color="orange">\1<\/span>/' | sed 's/^\(LOG.*\)$/<span color="green">\1<\/span>/' \
				sed -n "${start},${end}p" "${portage_log}" \
				| zenity --width 500 --height 300 --window-icon "${iconPath}" --text-info --title "Messages from ${package[$i]}"
			done
		fi
		[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while upgrading system, please check logs" && prepare_for_exit && exit 4
		cat "${tmpFile["logs"]}"

		if [ ! -z "${exclude}" ] || [ ! "${SET}" = "@world" ]; then
			text="Upgrade have terminated"
			zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "${text}"
			exit 0
		fi
	fi

# Standard upgrade
else
	[ $QUIET -eq 0 ] && QUIET='' || QUIET='q'
	[ $VERBOSE -eq 0 ] && VERBOSE='' || VERBOSE='v'
	emerge -a${QUIET}${VERBOSE}uDN ${SET}

	if [ $? -gt 0 ]; then
		text1="An error occurred on compilation time"
		text2="please check logs for more information"
		echo -e "${red}${text1}${normal}, ${text2}"
		exit 4
	fi
fi

# Depclean
if [ "$SET" = "@world" ]; then
	text="Preparing for cleaning"
	echo -e "${green}${text}...${normal}"
	if [ $X -gt 0 ]; then
		
		# first check
		( touch "${tmpFile["zenity"]}" && emerge -pqc 2>&1 > "${tmpFile["logs"]}"; rm "${tmpFile["zenity"]}" ) &
		sleep .5
		dots=""
		while [ -f "${tmpFile["zenity"]}" ]
		do
			sleep .5
			echo "# Checking for obsolete packages ${dots}"
			[ "$dots" = "..." ] && dots="" || dots="${dots}."
		done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --pulsate --auto-close --text ""

		[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
		cat "${tmpFile["logs"]}"

		if [ -s "${tmpFile["logs"]}" ]; then
			remove=$( sed -n '$p' "${tmpFile["logs"]}" | awk -F ' ' '{print $4}' )
			# remove unwanted lines from output
			sed -i '/\//!d' "${tmpFile["logs"]}"
			sed -i '/=/d' "${tmpFile["logs"]}"			

			package=( $( cut -d: -f1 "${tmpFile["logs"]}" ) )
			for i in ${!package[@]}; do
				versions[$i]=$( sed -n "$(( ${i}+1 ))p" "${tmpFile["logs"]}" | cut -d: -f2 )
				read selected[$i] protected[$i] omitted[$i] <<< "${versions[$i]}"
			done
			
			choix=( $(
				for i in ${!package[@]}; do
					echo -e "TRUE\n${package[$i]}\n${selected[$i]}\n${protected[$i]}\n${omitted[$i]}"
				done | zenity --width 500 --height 300 --window-icon "${iconPath}" --list --checklist --column 'remove' --column 'package' --column 'version' --column 'protected' --column 'omitted' --separator ' ' --title "${remove} packages would be unmerged" --text "Uncheck package you want to preserve" ) )
			if [ "$?" -gt 0 ]; then
				echo "Aborted"
				prepare_for_exit
				exit 1
			fi

			# get excluded packages list
			exclude=""
			if [[ "${package[@]}" != "${choix[@]}" ]]; then
				j=0
				for i in ${!package[@]}; do
					if [ "${choix[$j]}" = "${package[$i]}" ]; then
						j=$(( $j+1 ))
					else
						exclude+=" --exclude ${package[$i]}"
					fi
				done
			fi
			unset remove package selected protected omitted

			# finally clean
			text="Cleaning your system"
			echo -e "${green}${text}...${normal}"
			( touch "${tmpFile["zenity"]}" && emerge -qc $exclude 2>&1 > "${tmpFile["logs"]}"; echo $? > "${tmpFile["result"]}"; rm "${tmpFile["zenity"]}" ) &
			sleep .5
			cleaning=0
			percent=0
			while [ -f "${tmpFile["zenity"]}" ]
			do
				sleep .5
				print_line
				new=`get_line "Unmerging (" | awk -F[\(\)\ ] '{ print $4 }'`
				[ "$new" = "" ] || cleaning=$new

				if [ -z $total ]; then
					[ "$new" = "" ] || total=`grep "Unmerging (" "${tmpFile["logs"]}" | awk -F[\(\)\ ] '{ print $6 }'`
				fi
				[ -z $total ] || percent=$((100*($cleaning-1)/$total))
				echo "$percent"
			done | zenity --width=500 --window-icon "${iconPath}" --progress --title "${text}" --auto-close --text ""

			[ $? -gt 0 ] && prepare_for_exit emerge && exit 1
			[ -s "${tmpFile["result"]}" ] && [ $( cat "${tmpFile["result"]}" ) -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --error --title "Error" --text "An error occurred while cleaning system, please check logs" && prepare_for_exit && exit 5
			cat "${tmpFile["logs"]}"
		fi

	# Standard cleaning
	else
		emerge -a${QUIET}${VERBOSE}c || exit 5
	fi
fi

# Finished
text="Your system is now up to date"
[ $X -gt 0 ] && zenity --width 500 --window-icon "${iconPath}" --info --title "Upgrade" --text "${text}" && prepare_for_exit
echo "${text}"

exit 0
